// Copyright 2013, CHEVASSU Florian <chevassu.florian at gmail.com>
//
// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.


/* Traits in part derived from boost */

#ifndef MNI_TRAITS
#define MNI_TRAITS

#include <tuple>

namespace mni{
    
    template<typename T>
            struct is_tuple{
        static constexpr bool value = false;
    };
    template<typename... Args>
            struct is_tuple<std::tuple<Args...>>{
        static constexpr bool value = true;
    };
    
    
    
    template<typename Function> struct function_traits_impl;
    
    template<typename R>
            struct function_traits_impl<R (*)(void)>{
        typedef R result_type;
        typedef std::tuple<> args_type_tuple;
    };
    
    template<typename R, typename T1>
            struct function_traits_impl<R (*)(T1)>{
        typedef R result_type;
        typedef std::tuple<
                    typename std::remove_cv<typename std::remove_reference<T1>::type>::type
                > args_type_tuple;
    };
    
    template<typename R, typename T1, typename T2>
            struct function_traits_impl<R (*)(T1, T2)>{
        typedef R result_type;
        typedef std::tuple<
                    typename std::remove_cv<typename std::remove_reference<T1>::type>::type,
                    typename std::remove_cv<typename std::remove_reference<T2>::type>::type
                > args_type_tuple;
    };
    
    template<typename R, typename T1, typename T2, typename T3>
            struct function_traits_impl<R (*)(T1, T2, T3)>{
        typedef R result_type;
        typedef std::tuple<
                    typename std::remove_cv<typename std::remove_reference<T1>::type>::type,
                    typename std::remove_cv<typename std::remove_reference<T2>::type>::type,
                    typename std::remove_cv<typename std::remove_reference<T3>::type>::type
                > args_type_tuple;
    };
    
    template<typename R, typename T1, typename T2, typename T3, typename T4>
            struct function_traits_impl<R (*)(T1, T2, T3, T4)>{
        typedef R result_type;
        typedef std::tuple<
                    typename std::remove_cv<typename std::remove_reference<T1>::type>::type,
                    typename std::remove_cv<typename std::remove_reference<T2>::type>::type,
                    typename std::remove_cv<typename std::remove_reference<T3>::type>::type,
                    typename std::remove_cv<typename std::remove_reference<T4>::type>::type
                > args_type_tuple;
    };
    
    template<typename R, typename T1, typename T2, typename T3, typename T4,
            typename T5>
            struct function_traits_impl<R (*)(T1, T2, T3, T4, T5)>{
        typedef R result_type;
        typedef std::tuple<
                    typename std::remove_cv<typename std::remove_reference<T1>::type>::type,
                    typename std::remove_cv<typename std::remove_reference<T2>::type>::type,
                    typename std::remove_cv<typename std::remove_reference<T3>::type>::type,
                    typename std::remove_cv<typename std::remove_reference<T4>::type>::type,
                    typename std::remove_cv<typename std::remove_reference<T5>::type>::type
                > args_type_tuple;
    };
    
    template<typename R, typename T1, typename T2, typename T3, typename T4,
            typename T5, typename T6>
            struct function_traits_impl<R (*)(T1, T2, T3, T4, T5, T6)>{
        typedef R result_type;
        typedef std::tuple<
                    typename std::remove_cv<typename std::remove_reference<T1>::type>::type,
                    typename std::remove_cv<typename std::remove_reference<T2>::type>::type,
                    typename std::remove_cv<typename std::remove_reference<T3>::type>::type,
                    typename std::remove_cv<typename std::remove_reference<T4>::type>::type,
                    typename std::remove_cv<typename std::remove_reference<T5>::type>::type,
                    typename std::remove_cv<typename std::remove_reference<T6>::type>::type
                > args_type_tuple;
    };
    
    template<typename R, typename T1, typename T2, typename T3, typename T4,
            typename T5, typename T6, typename T7>
            struct function_traits_impl<R (*)(T1, T2, T3, T4, T5, T6, T7)>{
        typedef R result_type;
        typedef std::tuple<
                    typename std::remove_cv<typename std::remove_reference<T1>::type>::type,
                    typename std::remove_cv<typename std::remove_reference<T2>::type>::type,
                    typename std::remove_cv<typename std::remove_reference<T3>::type>::type,
                    typename std::remove_cv<typename std::remove_reference<T4>::type>::type,
                    typename std::remove_cv<typename std::remove_reference<T5>::type>::type,
                    typename std::remove_cv<typename std::remove_reference<T6>::type>::type,
                    typename std::remove_cv<typename std::remove_reference<T7>::type>::type
                > args_type_tuple;
    };
    
    template<typename R, typename T1, typename T2, typename T3, typename T4,
            typename T5, typename T6, typename T7, typename T8>
            struct function_traits_impl<R (*)(T1, T2, T3, T4, T5, T6, T7, T8)>{
        typedef R result_type;
        typedef std::tuple<
                    typename std::remove_cv<typename std::remove_reference<T1>::type>::type,
                    typename std::remove_cv<typename std::remove_reference<T2>::type>::type,
                    typename std::remove_cv<typename std::remove_reference<T3>::type>::type,
                    typename std::remove_cv<typename std::remove_reference<T4>::type>::type,
                    typename std::remove_cv<typename std::remove_reference<T5>::type>::type,
                    typename std::remove_cv<typename std::remove_reference<T6>::type>::type,
                    typename std::remove_cv<typename std::remove_reference<T7>::type>::type,
                    typename std::remove_cv<typename std::remove_reference<T8>::type>::type
                > args_type_tuple;
    };
    
    template<typename R, typename T1, typename T2, typename T3, typename T4,
            typename T5, typename T6, typename T7, typename T8, typename T9>
            struct function_traits_impl<R (*)(T1, T2, T3, T4, T5, T6, T7, T8, T9)>{
        typedef R result_type;
        typedef std::tuple<
                    typename std::remove_cv<typename std::remove_reference<T1>::type>::type,
                    typename std::remove_cv<typename std::remove_reference<T2>::type>::type,
                    typename std::remove_cv<typename std::remove_reference<T3>::type>::type,
                    typename std::remove_cv<typename std::remove_reference<T4>::type>::type,
                    typename std::remove_cv<typename std::remove_reference<T5>::type>::type,
                    typename std::remove_cv<typename std::remove_reference<T6>::type>::type,
                    typename std::remove_cv<typename std::remove_reference<T7>::type>::type,
                    typename std::remove_cv<typename std::remove_reference<T8>::type>::type,
                    typename std::remove_cv<typename std::remove_reference<T9>::type>::type
                > args_type_tuple;
    };
    
    template<typename R, typename T1, typename T2, typename T3, typename T4,
            typename T5, typename T6, typename T7, typename T8, typename T9,
            typename T10>
            struct function_traits_impl<R (*)(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)>{
        typedef R result_type;
        typedef std::tuple<
                    typename std::remove_cv<typename std::remove_reference<T1>::type>::type,
                    typename std::remove_cv<typename std::remove_reference<T2>::type>::type,
                    typename std::remove_cv<typename std::remove_reference<T3>::type>::type,
                    typename std::remove_cv<typename std::remove_reference<T4>::type>::type,
                    typename std::remove_cv<typename std::remove_reference<T5>::type>::type,
                    typename std::remove_cv<typename std::remove_reference<T6>::type>::type,
                    typename std::remove_cv<typename std::remove_reference<T7>::type>::type,
                    typename std::remove_cv<typename std::remove_reference<T8>::type>::type,
                    typename std::remove_cv<typename std::remove_reference<T9>::type>::type,
                    typename std::remove_cv<typename std::remove_reference<T10>::type>::type
                > args_type_tuple;
    };
    
    template <typename T>
            struct add_pointer{
        typedef T* type;
    };
    
    template<typename Function>
            struct function_traits : public function_traits_impl<typename add_pointer<Function>::type>{};
                
}


#endif